(ns i-am-a-horse-in-the-land-of-booleans)
(teen? 12)
(. System exit 0)
(teen? 12)
(defn generic-doublificate [x]
  (cond
    (coll? x)        (if (empty? x) nil (cond
                                        (list? x)   (* 2 (count x))
                                        (vector? x) (* 2 (count x))
                                        :else       true))
    (number? x) (* 2 x)
    :else             true))
(generic-doublificate 4)
(generic-doublificate [1 2 3])
(binding [*ns* (or (find-ns 'i-am-a-horse-in-the-land-of-booleans) (find-ns 'user))] (load-string "(teen? 12)"))
(binding [*ns* (or (find-ns 'i-am-a-horse-in-the-land-of-booleans) (find-ns 'user))] (load-string "(defn teen? [age]
  (if (> age 12) true false))"))
(teen? 12)
(binding [*ns* (or (find-ns 'i-am-a-horse-in-the-land-of-booleans) (find-ns 'user))] (load-string "(ns i-am-a-horse-in-the-land-of-booleans
  (:refer-clojure :exclude [boolean]))
(defn boolean [x]
  (if x true false))
(defn abs [x]
  (if (< x 0)
    (* x -1)
    x))
(defn divides? [divisor n]
  (if (= 0 (mod n divisor))
    true
    false))
(defn fizzbuzz [n]
  (cond
    (divides? 15 n) \"gotcha!\"
    (divides? 3 n) \"fizz\"
    (divides? 5 n) \"buzz\"
    :else          \"\"))
(defn teen? [age]
  (if (> age 12) true false))
(defn not-teen? [age]
  \":(\")
(defn generic-doublificate [x]
  (cond
    (coll? x)        (if (empty? x) nil (cond
                                        (list? x)   (* 2 (count x))
                                        (vector? x) (* 2 (count x))
                                        :else       true))
    (number? x) (* 2 x)
    :else             true))
(defn leap-year? [year]
  \":(\")
; '_______'
(teen? 12)"))
(teen? 16)
(teen? 65)
(binding [*ns* (or (find-ns 'i-am-a-horse-in-the-land-of-booleans) (find-ns 'user))] (load-string "(ns i-am-a-horse-in-the-land-of-booleans
  (:refer-clojure :exclude [boolean]))
(defn boolean [x]
  (if x true false))
(defn abs [x]
  (if (< x 0)
    (* x -1)
    x))
(defn divides? [divisor n]
  (if (= 0 (mod n divisor))
    true
    false))
(defn fizzbuzz [n]
  (cond
    (divides? 15 n) \"gotcha!\"
    (divides? 3 n) \"fizz\"
    (divides? 5 n) \"buzz\"
    :else          \"\"))
(defn teen? [age]
  (if (and (> age 12) (< age 20)) true false))
(defn not-teen? [age]
  \":(\")
(defn generic-doublificate [x]
  (cond
    (coll? x)        (if (empty? x) nil (cond
                                        (list? x)   (* 2 (count x))
                                        (vector? x) (* 2 (count x))
                                        :else       true))
    (number? x) (* 2 x)
    :else             true))
(defn leap-year? [year]
  \":(\")
; '_______'
(teen? 12)"))
(teen? 65)
(binding [*ns* (or (find-ns 'i-am-a-horse-in-the-land-of-booleans) (find-ns 'user))] (load-string "(defn teen? [age]
  (if (and (> age 12) (< age 20)) true false))"))
(teen? 12)
(teen? 16)
(teen? 21)
(binding [*ns* (or (find-ns 'i-am-a-horse-in-the-land-of-booleans) (find-ns 'user))] (load-string "(defn teen? [age]
  (if (and (> age 12) (< age 20)) true false))"))
(binding [*ns* (or (find-ns 'i-am-a-horse-in-the-land-of-booleans) (find-ns 'user))] (load-string "(defn teen? [age]
  (if (> age 12) (if (< age 20) true false) false))"))
(teen? 12)
(teen? 15)
(teen? 21)
empty
(. System exit 0)
