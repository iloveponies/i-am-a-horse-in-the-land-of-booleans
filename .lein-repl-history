(defn boolean [x] )
(defn is-small? [number](if(<number 100) "yes" "no"))
(defn is-small? [number](if(< number 100) "yes" "no"))
(is-small? 50)
(is-small? 500)
(if nil "true" "false")
(defn boolean [x] (if ( x nil) "true" "false"))
(x nil)
(boolean nil)
(defn boolean [x] (if (= x nil) "true" "false"))
(boolean nil)
(boolean ni)
(defn boolean [x] (if (!= x nil) "true" "false"))
(defn boolean [x] (if (not= x nil) "true" "false"))
(boolean ni)
(boolean nil)
(defn boolean [x] (if (not= x nil) "true" "false") (if(not= x false) "true" "false"))
(boolean false)
(boolean f)
(defn boolean [x] (if (= x true) "true" "false"))
(boolean true)
(boolean tr)
(clojure.pprint/pp)
(into {} (map #(vector % (boolean %)) [true false nil [] {} '() #{} ""]))
(into cv)
(clojure.pprint/pp)
(defn boolean [x] (if(not= nil) "true" "false") (if(not= false) "true" "false") (if(= foo) "true" "false") (if(= (+ 2 3)) "true" "false") (if(= true) "true" "false"))
(defn boolean [x] (if(not= nil) "true" "false") (if(not= false) "true" "false") (if(= "foo") "true" "false") (if(= (+ 2 3)) "true" "false") (if(= true) "true" "false"))
(boolean "foo")
(boolean true)
(boolean nil)
(boolean false)
(defn boolean [x] (if(= nil) "true" "false") (if(= false) "true" "false") (if(= "foo") "true" "false") (if(= (+ 2 3)) "true" "false") (if(= true) "true" "false"))
(boolean false)
(boolean nil)
(defn boolean [x] (if(not= nil) "true" "false") (if(not= false) "true" "false") (if(= "foo") "true" "false") (if(= (+ 2 3)) "true" "false") (if(= true) "true" "false"))
(boolean nil)
(defn boolean [y] (if(not= nil) "true" "false") (if(not= false) "true" "false") (if(= "foo") "true" "false") (if(= (+ 2 3)) "true" "false") (if(= true) "true" "false"))
(boolean nil)
(defn bool [y] (if(not= nil) "true" "false") (if(not= false) "true" "false") (if(= "foo") "true" "false") (if(= (+ 2 3)) "true" "false") (if(= true) "true" "false"))
(bool true)
(bool false)
(defn bool [y] (if(not= y nil) "true" "false") (if(not= y false) "true" "false") (if(= "foo") "true" "false") (if(= (+ 2 3)) "true" "false") (if(= true) "true" "false"))
(bool go)
(bool foo)
(bool "foo")
(bool nil)
(bool false)
(defn bool [y] (if(not= y nil) "true" "false") (if(not= y false) "true" "false") (if(= y "foo") "true" "false") (if(= y (+ 2 3)) "true" "false") (if(= y true) "true" "false"))
(bool nil)
(bool false)
(bool true)
(bool (+ 2 3))
(bool ("foo")
(bool "foo")
hlep
(bool "foo")
(defn bool [y] (if(not= y nil) "true" "false") (if(not= y false) "true" "false") (if(= y "foo") "true" "false") (if(= y (+ 2 3)) "true" "false") (if(= y true) "true" "false"))
(bool "foo")
