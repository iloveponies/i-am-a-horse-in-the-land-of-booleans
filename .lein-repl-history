(. System exit 0)
(binding [*ns* (or (find-ns 'i-am-a-horse-in-the-land-of-booleans) (find-ns 'user))] (load-string "(defn boolean [x]
  (if (= x nil)
  (= false)
  (= true)
  )
)"))
(binding [*ns* (or (find-ns 'i-am-a-horse-in-the-land-of-booleans) (find-ns 'user))] (load-string "(ns i-am-a-horse-in-the-land-of-booleans
  (:refer-clojure :exclude [boolean]))
(defn boolean [x]
  (if (= x nil)
  (= false)
  (= true)
  )
)
(defn abs [x]
  (if (< x 0)
  (- x)
  x
  )
)
(defn divides? [divisor n]
  (if (mod n divisor) 0)
  (= true)
  (= false)
)
(defn fizzbuzz [n]
  \":(\")
(defn teen? [age]
  (if (and (>= age 13) (<= age 19) true)
  ( = true)
  ( = false)
  )
)
(defn not-teen? [age]
  \":(\")
(defn generic-doublificate [x]
  \":(\")
(defn leap-year? [year]
  \":(\")
; '_______'"))
(defn boolean [x]
  (if (= x nil)
  (= false)
  (= true)
  )
)
(. System exit 0)
(load-string "")
(binding [*ns* (or (find-ns 'i-am-a-horse-in-the-land-of-booleans) (find-ns 'user))] (load-string "(ns i-am-a-horse-in-the-land-of-booleans
  (:refer-clojure :exclude [boolean]))
(defn boolean [x]
  (if (= x nil)
  (= false)
  (= true)
  )
)
(defn abs [x]
  (if (< x 0)
  (- x)
  x
  )
)"))
(. System exit 0)
(+ 1 2 3)
(if (= x nil)
(= false)
(= true)
  (if (= x nil)
  (= false)
  (= true)
  )
exit
)
  (if (= x nil)
  (= false)
  (= true)
  )
  (if (= x nil)
  (= false)
  (= true)
  )
(if (mod n divisor) 0)
(. System exit 0)
