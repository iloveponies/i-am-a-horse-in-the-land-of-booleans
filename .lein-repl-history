(if "foo" "truthy" "falsey")
(if (my-father? darth-vader) (lose-hand me) (gain-hat me))
(boolean "foo")
(use 'i_am_a_horse_in_the_land_of_booleans.clj)
(abs 4)
(use 'i_am_a_horse_in_the_land_of_booleans.clj)
(use 'i_am_a_horse_in_the_land_of_booleans)
(boolean nil)
(boolean true)
(boolean "foo")
(boolean nik)
(boolean nil)
(boolean (+ 2 3))
(boolean true)
(use 'foo.bar :reload-all)
(abs 2)
(use 'foo.bar :reload-all)
(abs 2)
(use 'foo.bar :reload-all)
(square 2)
(use 'i_am_a_horse_in_the_land_of_booleans)
(square 2)
(use 'i_am_a_horse_in_the_land_of_booleans)
(square 2)
(use 'i-am-a-horse-in-the-land-of-booleans)
(square 2)
(use 'i-am-a-horse-in-the-land-of-booleans)
(square 2)
(use 'i-am-a-horse-in-the-land-of-booleans)
(square 2)
(boolean (+ 2 3))
(boolean true)
(if (my-father? darth-vader)  ; Conditional
  (lose-hand me)              ; If true
  (gain-hat me))  
(if (my-father? darth-vader) (lose-hand me) (gain-hat me))
(use 'foo.bar :reload-all)
(boolean darth-vader)
(boolean x)
(use 'foo.bar :reload-all)
(square 5 5)
(use 'foo.bar :reload-all)
(square 5)
(boolean x)
(use 'foo.bar :reload-all)
(boolean x)
(use 'foo.bar :reload-all)
(square 5)
(use 'foo.bar :reload-all)
(boolean x)
(use 'foo.bar :reload-all)
(boolean x)
(use 'foo.bar :reload-all)
(teen? 13)
(teen? 10)
(use 'foo.bar :reload-all)
(teen? 10)
(use 'foo.bar :reload-all)
(teen? 10)
(use 'i-am-a-horse-in-the-land-of-booleans)
(use 'foo.bar :reload-all)
(teen? 10)
(teen? 15)
(boolean nil)
(boolean (+ 2 4))
(defn sign [x]
  (if (< x 0)
    "-"
    "+"))
(sign 2)
(sign -2)
(sign 0)
(use 'foo.bar :reload-all)
(abs 2)
(use 'foo.bar :reload-all)
(use 'foo-bar :reload-all)
(use 'i-am-a-horse-in-the-land-of-booleans :reload-all)
(abs 2)
(use 'i-am-a-horse-in-the-land-of-booleans :reload-all)
(abs 2)
(use 'i-am-a-horse-in-the-land-of-booleans :reload-all)
(* 1 1)
(* 1 2)
((* 1 2)- 2)
((* 1 2)- 2))
(-(* 1 2) 2))
(use 'i-am-a-horse-in-the-land-of-booleans :reload-all)
(abs 2)
(use 'i-am-a-horse-in-the-land-of-booleans :reload-all)
(abs 2)
(use 'i-am-a-horse-in-the-land-of-booleans :reload-all)
(abs 2)
(use 'i-am-a-horse-in-the-land-of-booleans :reload-all)
(abs 2)
(abs -2)
(abs -6)
(use 'i-am-a-horse-in-the-land-of-booleans :reload-all)
(abs -2)
(abs 2)
(abs 7)
(* -8 -7)
(* -6 -6)
(* -6)
(* -1 -6)
(use 'i-am-a-horse-in-the-land-of-booleans :reload-all)
(abs 2)
(abs -2)
(use 'i-am-a-horse-in-the-land-of-booleans :reload-all)
(* -1 -6)
(defn abs [x]
  (if (< x 0)
          (* -1 -x)
   (* 1 x))
(abs 3)
(use 'i-am-a-horse-in-the-land-of-booleans :reload-all)
(abs 3)
(use 'i-am-a-horse-in-the-land-of-booleans :reload-all)
(abs 3)
(use 'i-am-a-horse-in-the-land-of-booleans :reload-all)
(abs 3)
(abs -3)
(use 'i-am-a-horse-in-the-land-of-booleans :reload-all)
(ns 'i-am-a-horse-in-the-land-of-booleans)
(ns i-am-a-horse-in-the-land-of-booleans)
divides
divides 4
divides 5
divides 6
boolean 
fizzbuzz 3
fizzbuzz
(use 'i-am-a-horse-in-the-land-of-booleans)
abs 6
boolean 
boolean k
=
divides 5? 5
divides 5
fizzbuzz 6
fizzbuzz 15
(use 'i-am-a-horse-in-the-land-of-booleans)
answer
(use 'i-am-a-horse-in-the-land-of-booleans)
(fizzbuzz 45)
(fizzbuzz 48)
(fizzbuzz 70)
answer
(use 'i-am-a-horse-in-the-land-of-booleans)
answer
(use 'i-am-a-horse-in-the-land-of-booleans :reload-all)
answer
(fizzbuzz 70)
(boolean "foo")
(boolean false)
(boolean (+ 2 3))
(boolean nil)
(use 'i-am-a-horse-in-the-land-of-booleans)
(fizzbuzz 45)
(use '(if (defn boolean [x] nil or false)
  (false)
  (true)
)
(use 'i-am-a-horse-in-the-land-of-booleans)
(fizzbuzz 45)
(use 'i-am-a-horse-in-the-land-of-booleans :reload)
(boolean nil)
(boolean "jee")
(boolean false)
(use 'i-am-a-horse-in-the-land-of-booleans :reload)
(boolean false)
(boolean "false")
(use 'i-am-a-horse-in-the-land-of-booleans :reload)
(boolean "op")
(use 'i-am-a-horse-in-the-land-of-booleans :reload)
(boolean nil)
(boolean "jee")
(boolean true)
(boolean nil)
(use 'i-am-a-horse-in-the-land-of-booleans :reload)
(boolean nil)
(boolean true)
(boolean "jee")
(use 'i-am-a-horse-in-the-land-of-booleans :reload)
(boolean "jee")
(boolean nil)
(boolean false)
(boolean (+ 2 4))
(use 'i-am-a-horse-in-the-land-of-booleans)
(== 420 420)
(== 420 42)
(teen? 48)
(teen? 15)
(sign -15)
(sign 0)
(use 'i-am-a-horse-in-the-land-of-booleans :reload)
(sign 2)
(sign -2)
(abs -2)
(mod 10 5)
(mod 3 2)
(divides? 2 4)
(divides? 4 2)
(divides? 2 5)
(mod 5 20)
(generic-doublificate 1)
(use 'i-am-a-horse-in-the-land-of-booleans :reload)
(generic-doublificate 1)
(generic-doublificate {:a 1})
(generic-doublificate {1})
(generic-doublificate {})
(generic-doublificate [])
(generic-doublificate [1 2])
(use 'i-am-a-horse-in-the-land-of-booleans :reload)
(generic-doublificate 1)
(use 'i-am-a-horse-in-the-land-of-booleans :reload)
(generic-doublificate [1 2])
(generic-doublificate {3 6})
(use 'i-am-a-horse-in-the-land-of-booleans)
(generic-doublificate [1 2])
(and "foo" "bar")
(and "foo" false)
(use 'i-am-a-horse-in-the-land-of-booleans :reload)
(leap-year? 100)
(mod 4 100)
(mod 200 4)
(mod 4 200)
(mod 4 400)
(mod 400 4)
(mod 412 4)
(mod 413 4)
(mod 20 4)
(mod 12 4)
(use 'i-am-a-horse-in-the-land-of-booleans :reload)
(leap-year? 15)
(use 'i-am-a-horse-in-the-land-of-booleans :reload)
(leap-year? 15)
(leap-year? 400)
